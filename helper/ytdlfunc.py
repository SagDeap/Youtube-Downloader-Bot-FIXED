from __future__ import unicode_literals
from pyrogram import Client, filters, StopPropagation
from pyrogram.types import InlineKeyboardButton, InlineKeyboardMarkup
import youtube_dl
from utils.util import humanbytes
import asyncio
import re
import os


def buttonmap(item):
    quality = item['format']
    if "audio" in quality:
        return [InlineKeyboardButton(f"{quality} üéµ {humanbytes(item['filesize'])}",
                                     callback_data=f"ytdata||audio||{item['format_id']}||{item['yturl']}")]
    else:
        return [InlineKeyboardButton(f"{quality} üìπ {humanbytes(item['filesize'])}",
                                     callback_data=f"ytdata||video||{item['format_id']}||{item['yturl']}")]

# Return a array of Buttons
def create_buttons(quailitylist):
    return map(buttonmap, quailitylist)


# extract Youtube info
def extractYt(yturl):
    ydl = youtube_dl.YoutubeDL()
    with ydl:
        qualityList = []
        try:
            r = ydl.extract_info(yturl, download=False)
        except Exception as e:
            print("–û—à–∏–±–∫–∞ youtube-dl:", e)
            raise
        for format in r['formats']:
            # Filter dash video(without audio)
            if not "dash" in str(format['format']).lower():
                filesize = format.get('filesize') or 0
                qualityList.append(
                {"format": format['format'], "filesize": filesize, "format_id": format['format_id'],
                 "yturl": yturl})

        return r['title'], r['thumbnail'], qualityList


#  Need to work on progress

# def downloadyt(url, fmid, custom_progress):
#     ydl_opts = {
#         'format': f"{fmid}+bestaudio",
#         "outtmpl": "test+.%(ext)s",
#         'noplaylist': True,
#         'progress_hooks': [custom_progress],
#     }
#     with youtube_dl.YoutubeDL(ydl_opts) as ydl:
#         ydl.download([url])


# https://github.com/SpEcHiDe/AnyDLBot

async def downloadvideocli(command_to_exec):
    process = await asyncio.create_subprocess_exec(
        *command_to_exec,
        # stdout must a pipe to be accessible as process.stdout
        stdout=asyncio.subprocess.PIPE,
        stderr=asyncio.subprocess.PIPE, )
    stdout, stderr = await process.communicate()
    e_response = stderr.decode().strip()
    t_response = stdout.decode().strip()
    print("STDOUT:", t_response)
    print("STDERR:", e_response)
    
    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞ (—Å —É—á–µ—Ç–æ–º –ø—Ä–æ–±–ª–µ–º –∫–æ–¥–∏—Ä–æ–≤–∫–∏)
    def check_file_exists(file_path):
        # –ü—Ä—è–º–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
        if os.path.exists(file_path):
            return file_path
            
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤ –∫–∞—Ç–∞–ª–æ–≥–µ
        dir_path = os.path.dirname(file_path)
        if not os.path.exists(dir_path):
            return None
            
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤ –≤ –∫–∞—Ç–∞–ª–æ–≥–µ
        base_name = os.path.basename(file_path)
        extension = os.path.splitext(base_name)[1].lower()
        
        matching_files = []
        for file in os.listdir(dir_path):
            if file.lower().endswith(extension):
                # –í–æ–∑–º–æ–∂–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –∏–º–µ–Ω–∏ —Å –ø—Ä–æ–±–ª–µ–º–∞–º–∏ –∫–æ–¥–∏—Ä–æ–≤–∫–∏
                matching_files.append(os.path.join(dir_path, file))
        
        if matching_files:
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–∞–º—ã–π –Ω–æ–≤—ã–π —Ñ–∞–π–ª
            return max(matching_files, key=os.path.getmtime)
        return None
    
    # –ü–æ–∏—Å–∫ —Å—Ç—Ä–æ–∫–∏ —Å "Merging formats into"
    if "Merging formats into" in t_response:
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –∏–∑ —Å—Ç—Ä–æ–∫–∏
            merge_line = None
            for line in t_response.split("\n"):
                if "Merging formats into" in line:
                    merge_line = line
                    break
                    
            if merge_line:
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É, —É—á–∏—Ç—ã–≤–∞—è –¥–≤–æ–π–Ω—ã–µ –∫–∞–≤—ã—á–∫–∏
                parts = merge_line.split("Merging formats into")
                quoted_filename = parts[1].strip()
                if quoted_filename.startswith('"') and quoted_filename.endswith('"'):
                    filename = quoted_filename[1:-1]  # –£–±–∏—Ä–∞–µ–º –∫–∞–≤—ã—á–∫–∏
                else:
                    filename = quoted_filename
                    
                print(f"–ù–∞–π–¥–µ–Ω –ø—É—Ç—å –∫ –∏—Ç–æ–≥–æ–≤–æ–º—É —Ñ–∞–π–ª—É: {filename}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª (—Å —É—á–µ—Ç–æ–º –ø—Ä–æ–±–ª–µ–º –∫–æ–¥–∏—Ä–æ–≤–∫–∏)
                checked_file = check_file_exists(filename)
                if checked_file:
                    return checked_file
                
                # –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π –ø—É—Ç—å
                return filename
                
        except Exception as e:
            print("–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞:", e)
    
    # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ —á–µ—Ä–µ–∑ Merging, –∏—â–µ–º —á–µ—Ä–µ–∑ Destination
    elif "Destination" in t_response:
        try:
            # –ù–∞–π–¥—ë–º –≤—Å–µ –ø—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º, –≤–æ–∑—å–º—ë–º –ø–æ—Å–ª–µ–¥–Ω–∏–π
            matches = []
            for line in t_response.split("\n"):
                if "Destination:" in line:
                    parts = line.split("Destination:")
                    file_path = parts[1].strip()
                    matches.append(file_path)
            
            if matches:
                # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ñ–∞–π–ª —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º .mkv
                for match in reversed(matches):
                    if match.lower().endswith(".mkv"):
                        print(f"–ù–∞–π–¥–µ–Ω –ø—É—Ç—å –∫ –∏—Ç–æ–≥–æ–≤–æ–º—É —Ñ–∞–π–ª—É —á–µ—Ä–µ–∑ Destination: {match}")
                        checked_file = check_file_exists(match)
                        if checked_file:
                            return checked_file
                
                # –ï—Å–ª–∏ .mkv –Ω–µ –Ω–∞–π–¥–µ–Ω, –±–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ñ–∞–π–ª
                filename = matches[-1].strip()
                print(f"–ù–∞–π–¥–µ–Ω –ø—É—Ç—å –∫ –∏—Ç–æ–≥–æ–≤–æ–º—É —Ñ–∞–π–ª—É —á–µ—Ä–µ–∑ Destination: {filename}")
                checked_file = check_file_exists(filename)
                if checked_file:
                    return checked_file
                return filename
                
        except Exception as e:
            print("–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ (Destination):", e)
    
    # –ï—Å–ª–∏ –ø–æ Destination –Ω–µ –Ω–∞—à–ª–∏, –∏—â–µ–º —Å—Ç—Ä–æ–∫—É "has already been downloaded"
    elif "[download]" in t_response and "has already been downloaded and merged" in t_response:
        # –ù–∞–π—Ç–∏ —Å—Ç—Ä–æ–∫—É —Å –ª—é–±—ã–º —Ñ–∞–π–ª–æ–º
        for line in t_response.split("\n"):
            if "[download]" in line and "has already been downloaded and merged" in line:
                try:
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –∏–∑ —Å—Ç—Ä–æ–∫–∏
                    parts = line.split("[download] ")
                    if len(parts) > 1:
                        file_path = parts[1].split(" has already been downloaded")[0].strip()
                        print(f"–ù–∞–π–¥–µ–Ω —É–∂–µ —Å–∫–∞—á–∞–Ω–Ω—ã–π —Ñ–∞–π–ª: {file_path}")
                        checked_file = check_file_exists(file_path)
                        if checked_file:
                            return checked_file
                        return file_path
                except Exception as e:
                    print("–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ (already downloaded):", e)
    
    # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–ª–∏, –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—Ç–∞–ª–æ–≥ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ .mkv —Ñ–∞–π–ª–æ–≤
    try:
        directory = os.path.dirname(command_to_exec[-2])  # –ü—É—Ç—å –∫ –∫–∞—Ç–∞–ª–æ–≥—É –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        if "%(title)s" in command_to_exec[-2]:
            # –ï—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —à–∞–±–ª–æ–Ω –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞, –ø–æ–ª—É—á–∞–µ–º –∫–∞—Ç–∞–ª–æ–≥
            parts = command_to_exec[-2].split(os.sep)
            directory = os.sep.join(parts[:-1])
        
        # –ò—â–µ–º .mkv —Ñ–∞–π–ª—ã –≤ –∫–∞—Ç–∞–ª–æ–≥–µ
        if os.path.exists(directory):
            mkv_files = [os.path.join(directory, f) for f in os.listdir(directory) if f.lower().endswith(".mkv")]
            if mkv_files:
                # –ë–µ—Ä–µ–º —Å–∞–º—ã–π –Ω–æ–≤—ã–π —Ñ–∞–π–ª
                newest_file = max(mkv_files, key=os.path.getmtime)
                print(f"–ù–∞–π–¥–µ–Ω –Ω–æ–≤–µ–π—à–∏–π .mkv —Ñ–∞–π–ª –≤ –∫–∞—Ç–∞–ª–æ–≥–µ: {newest_file}")
                return newest_file
    except Exception as e:
        print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ .mkv —Ñ–∞–π–ª–æ–≤ –≤ –∫–∞—Ç–∞–ª–æ–≥–µ:", e)
    
    print("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–º—è —Ñ–∞–π–ª–∞ –≤ –≤—ã–≤–æ–¥–µ youtube-dl")
    return None


async def downloadaudiocli(command_to_exec):
    process = await asyncio.create_subprocess_exec(
        *command_to_exec,
        # stdout must a pipe to be accessible as process.stdout
        stdout=asyncio.subprocess.PIPE,
        stderr=asyncio.subprocess.PIPE, )
    stdout, stderr = await process.communicate()
    e_response = stderr.decode().strip()
    t_response = stdout.decode().strip()
    print("STDOUT (–∞—É–¥–∏–æ):", t_response)
    print("STDERR (–∞—É–¥–∏–æ):", e_response)
    
    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞ (—Å —É—á–µ—Ç–æ–º –ø—Ä–æ–±–ª–µ–º –∫–æ–¥–∏—Ä–æ–≤–∫–∏)
    def check_file_exists(file_path):
        # –ü—Ä—è–º–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
        if os.path.exists(file_path):
            return file_path
            
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤ –∫–∞—Ç–∞–ª–æ–≥–µ
        dir_path = os.path.dirname(file_path)
        if not os.path.exists(dir_path):
            return None
            
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤ –≤ –∫–∞—Ç–∞–ª–æ–≥–µ
        base_name = os.path.basename(file_path)
        extension = os.path.splitext(base_name)[1].lower()
        
        matching_files = []
        for file in os.listdir(dir_path):
            if file.lower().endswith(extension):
                # –í–æ–∑–º–æ–∂–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –∏–º–µ–Ω–∏ —Å –ø—Ä–æ–±–ª–µ–º–∞–º–∏ –∫–æ–¥–∏—Ä–æ–≤–∫–∏
                matching_files.append(os.path.join(dir_path, file))
        
        if matching_files:
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–∞–º—ã–π –Ω–æ–≤—ã–π —Ñ–∞–π–ª
            return max(matching_files, key=os.path.getmtime)
        return None

    try:
        # –ü–æ–∏—Å–∫ —Å—Ç—Ä–æ–∫–∏ —Å "Destination"
        matches = []
        for line in t_response.split("\n"):
            if "Destination:" in line:
                parts = line.split("Destination:")
                file_path = parts[1].strip()
                matches.append(file_path)
        
        if matches:
            # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ñ–∞–π–ª —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º .mp3
            for match in reversed(matches):
                if match.lower().endswith(".mp3"):
                    print(f"–ù–∞–π–¥–µ–Ω –∞—É–¥–∏–æ—Ñ–∞–π–ª (mp3): {match}")
                    checked_file = check_file_exists(match)
                    if checked_file:
                        return checked_file
            
            # –ï—Å–ª–∏ .mp3 –Ω–µ –Ω–∞–π–¥–µ–Ω, –±–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ñ–∞–π–ª
            filename = matches[-1].strip()
            print(f"–ù–∞–π–¥–µ–Ω –∞—É–¥–∏–æ—Ñ–∞–π–ª: {filename}")
            checked_file = check_file_exists(filename)
            if checked_file:
                return checked_file
            return filename
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø—É—Ç–∏ –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞ –ø–æ Destination: {e}")
    
    try:
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ —á–µ—Ä–µ–∑ Destination, –∏—â–µ–º "has already been downloaded"
        for line in t_response.split("\n"):
            if "[download]" in line and "has already been downloaded" in line:
                parts = line.split("[download] ")
                if len(parts) > 1:
                    file_path = parts[1].split(" has already been downloaded")[0].strip()
                    print(f"–ù–∞–π–¥–µ–Ω —É–∂–µ —Å–∫–∞—á–∞–Ω–Ω—ã–π –∞—É–¥–∏–æ—Ñ–∞–π–ª: {file_path}")
                    checked_file = check_file_exists(file_path)
                    if checked_file:
                        return checked_file
                    return file_path
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —É–∂–µ —Å–∫–∞—á–∞–Ω–Ω–æ–≥–æ –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞: {e}")
    
    # –ï—Å–ª–∏ –¥—Ä—É–≥–∏–µ –º–µ—Ç–æ–¥—ã –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏, –∏—â–µ–º MP3 —Ñ–∞–π–ª—ã –≤ –≤—ã—Ö–æ–¥–Ω–æ–º –∫–∞—Ç–∞–ª–æ–≥–µ
    try:
        directory = os.path.dirname(command_to_exec[-2])  # –ü—É—Ç—å –∫ –∫–∞—Ç–∞–ª–æ–≥—É –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        if "%(title)s" in command_to_exec[-2]:
            # –ï—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —à–∞–±–ª–æ–Ω –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞, –ø–æ–ª—É—á–∞–µ–º –∫–∞—Ç–∞–ª–æ–≥
            parts = command_to_exec[-2].split(os.sep)
            directory = os.sep.join(parts[:-1])
        
        # –ò—â–µ–º .mp3 —Ñ–∞–π–ª—ã –≤ –∫–∞—Ç–∞–ª–æ–≥–µ
        if os.path.exists(directory):
            mp3_files = [os.path.join(directory, f) for f in os.listdir(directory) if f.lower().endswith(".mp3")]
            if mp3_files:
                # –ë–µ—Ä–µ–º —Å–∞–º—ã–π –Ω–æ–≤—ã–π —Ñ–∞–π–ª
                newest_file = max(mp3_files, key=os.path.getmtime)
                print(f"–ù–∞–π–¥–µ–Ω –Ω–æ–≤–µ–π—à–∏–π .mp3 —Ñ–∞–π–ª –≤ –∫–∞—Ç–∞–ª–æ–≥–µ: {newest_file}")
                return newest_file
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ .mp3 —Ñ–∞–π–ª–æ–≤ –≤ –∫–∞—Ç–∞–ª–æ–≥–µ: {e}")
    
    # –ï—Å–ª–∏ –≤—Å–µ –º–µ—Ç–æ–¥—ã –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—ã–π —Å–ø–æ—Å–æ–±
    try:
        filename = t_response.split("Destination")[-1].split("Deleting")[0].split(":")[-1].strip()
        print(f"–û–ø—Ä–µ–¥–µ–ª–µ–Ω –∞—É–¥–∏–æ—Ñ–∞–π–ª –ø–æ —Å—Ç–∞—Ä–æ–º—É –∞–ª–≥–æ—Ä–∏—Ç–º—É: {filename}")
        checked_file = check_file_exists(filename)
        if checked_file:
            return checked_file
        return filename
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ –∏–º–µ–Ω–∏ –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞ –ø–æ —Å—Ç–∞—Ä–æ–º—É –∞–ª–≥–æ—Ä–∏—Ç–º—É: {e}")
        return None
